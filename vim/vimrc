" Plugins {
call plug#begin('~/.vim/plugged')

" Show git diffs and navigate through hunks (currently not activated)
" Toggle with :GitGutterToggle
Plug 'airblade/vim-gitgutter'
Plug 'LaTeX-Box-Team/LaTeX-Box'
" Fast movement around the screen
" <Leader><Leader>[bwfjk]
Plug 'Lokaltog/vim-easymotion'
Plug 'bling/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'
" Align text
" :Tab/S, where S is what to align
" :Tab/S\zs, aligns ignoring S
Plug 'godlygeek/tabular'
" Fuzzy finding using FZF
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
" Show window with tags
" :TagbarToggle (currently <F9> mapped to this)
Plug 'majutsushi/tagbar'
" Visually display indent levels
" <Leader>ig
Plug 'nathanaelkane/vim-indent-guides'
" Syntax highlighting and indentation for Haskell and Cabal
Plug 'raichoo/haskell-vim'
" Tree explore
" :NERDTreeToggle (currently C-n mapped to this)
Plug 'scrooloose/nerdtree'
" Syntax checking
Plug 'scrooloose/syntastic'
" Tmux syntax highlighting
" K jumps to word in tmux man
" g! executes lines as tmux commands
" :make invokes tmux source .tmux.conf and places errors in quicklist
Plug 'tmux-plugins/vim-tmux'
" Fast commenting with gc (for a single line, gcc)
Plug 'tpope/vim-commentary'
" Obsessive session keeping
Plug 'tpope/vim-obsession'
" Git wrapper
Plug 'tpope/vim-fugitive'
" Syntax, indent, and filetype plugin files for git
Plug 'tpope/vim-git'
" Erlang dev
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/vim-erlang-tags'
" View man page in vim
" :Man command (horizontal split, also mapped to <leader>mm down in plugin opts)
" :Vman command (vertical split, also mapped to <leader>mv down in plugin opts)
Plug 'vim-utils/vim-man'

" Colors
Plug 'altercation/vim-colors-solarized'
Plug 'jnurmine/Zenburn'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'

"" TODO: Look at...
"" https://github.com/SirVer/ultisnips
"" https://github.com/Shougo/neocomplcache.vim
"" https://github.com/Valloric/YouCompleteMe
"" https://github.com/eagletmt/neco-ghc

" Add plugins to &runtimepath
call plug#end()
" }

let useSolarized = 0
if $TERM =~ '256color$' || &t_Co >= 256 || has("gui_running")
    map <silent> <F5> :let &background = ( &background == "dark"? "light" : "dark" )<CR>
    " Disable Background Color Erase (BCE) so that color schemes render properly
    " when inside 256-color tmux and GNU screen.
    " See http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
    try
        if useSolarized
            set background=dark
            "When using ':set list' to see special characters:
            " 'low' for dark, 'high' for red
            let g:solarized_visibility = "normal"
            let g:solarized_termcolors = 256
            " let g:solarized_termcolors = 16
            colorscheme solarized
        else
            set background=dark
            colorscheme gruvbox
        endif
    " Cannot find color scheme: this may happen if colors are not installed
    catch /E185:/
        colorscheme slate
    endtry
else
    colorscheme slate
endif

" Markdown!
au BufRead,BufNewFile *.md set filetype=markdown

if has("autocmd")
    " Automatically save and show view (for folds, e.g.).
    " To configure what is saved, use viewoptions
    " Idea from http://dotfiles.org/~tsukkee/.vimrc
    augroup vimrc
        autocmd BufWritePost *
                    \   if expand('%') != '' && &buftype !~ 'nofile'
                    \|      mkview
                    \|  endif
        autocmd BufRead *
                    \   if expand('%') != '' && &buftype !~ 'nofile'
                    \|      silent loadview
                    \|  endif
    augroup END
    " If current file is called '.vimrc', execute ':so $MYVIMRC' after write
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

source ~/.vim/plugins/setcolors.vim

" :options {
"  1. Important {
set nocompatible " behave very Vi compatible (not advisable)
" }
"  2. Moving around, searching and patterns {
set incsearch " show match for partly typed search command
set ignorecase " ignore case when using a search pattern
set smartcase " override 'ignorecase' when pattern has upper case characters
vnoremap // y/<C-R>"<CR>
" Keep search pattern at the center of the screen:
" nnoremap <silent> n nzz
" nnoremap <silent> N Nzz
" nnoremap <silent> * *zz
" nnoremap <silent> # #zz
" nnoremap <silent> g* g*zz
" nnoremap <silent> g# g#zz
" }
"  3. Tags {
" }
"  4. Displaying text {
set number " show the line number for each line
set scrolloff=3 "number of screen lines to show around the cursor
set listchars=tab:▸\ ,trail:·,eol:¬
set cursorline
set cursorlineopt=number
" }
"  5. Syntax, highlighting and spelling {
syntax on
set hlsearch " highlight all matches for the last used search pattern
set colorcolumn=80 " show a column at the 80th char
match Error /\s\+$/
" }
"  6. Multiple windows {
" Status bar always visible
set laststatus=2 " 0, 1 or 2; when to use a status line for the last window
                 " 2: Show a status line, even if there's only one Vim window
set splitbelow " New windows below the current one
set splitright " New windows to the right of the current one
" }
"  7. Multiple tab pages {
" }
"  8. Terminal {
" }
"  9. Using the mouse {
" }
" 10. Printing {
" }
" 11. Messages and info {
set showcmd " show (partial) command keys in the status line
set showmode " display the current mode in the status line
set ruler " show cursor position below each window
set visualbell "use a visual bell instead of beeping
" }
" 12. Selecting text {
set backspace=2 " Delete in insert made!
" }
" 13. Editing text {
set textwidth=80 " line length above which to break a line
set nojoinspaces " We don't want two spaces after periods when joining lines
" }
" 14. Tabs and indenting {
set tabstop=2 " number of spaces a <Tab> in the text stands for
set shiftwidth=2 " number of spaces used for each step of (auto)indent
set autoindent " automatically set the indent of a new line
set showmatch " when inserting a bracket, briefly jump to its match
set expandtab " expand <Tab> to spaces in Insert mode
" }
" 15. Folding {
set foldcolumn=1
" function HasFoldedLine() " Function that checks is there are any folds
"   let lnum=1
"   while lnum <= line("$")
"       if (foldclosed(lnum) > -1)
"           return 1
"       endif
"       let lnum+=1
"   endwhile
"   return 0
" endfunction
" " fdc = foldcolumn
" au CursorHold * if HasFoldedLine() == 1 | set fdc=1 | else |set fdc=0 | endif
set foldmethod=manual   " Manually insert folds
" }
" 16. Diff mode {
" }
" 17. Mapping {
let mapleader="\<Space>" " Change Leader key from \ to space || <SPACE>
"" Useful for stuff like: noremap <Leader>W :w !sudo tee % > /dev/null
cmap w!! w !sudo tee % >/dev/null
" Shortcut to rapidly toggle `set list`:
nmap <leader>l :set list!<CR>
nmap <leader>n :nohlsearch<CR>
nmap <silent> <leader>c :syntax sync fromstart<CR>
" Copy and paste to system clipboard
vmap <Leader>y "+y
" Avoid entering in ExMode
noremap Q <Nop>
" }
" 18. Reading and writing files {
" }
" 19. The swap file {
" }
" 20. Command line editing {
set wildmenu " command-line completion shows a list of matches
set wildmode=longest:full,full
set wildchar=<TAB> " key that triggers command-line expansion
" List of patterns to ignore files for file name completion
set wildignore=*.o,*.core,*~,core,*.swp,#*#,*.beam
set undofile "automatically save and restore undo history
set undodir=~/.vim/undos
" }
" 21. Executing external commands {
" }
" 22. Running make and jumping to errors {
" }
" 23. Language specific {
" }
" 24. Multi-byte characters {
" }
" 25. Various {
" List of words that specifies what to save for :mkview
" set viewoptions=folds,options,cursor " <~ default
set viewoptions=folds,cursor
" }
" }

" Plugin options {
    " airblade/vim-gitgutter {
        let g:gitgutter_map_keys = 0
    " }
    " junegunn/fzf.vim {
        nnoremap <silent> <leader><leader>p :Files<CR>
        nnoremap <silent> <leader><leader>t :Tags<CR>
    " }
    " tpope/vim-fugitive {
        nmap <leader>g :Gstatus<CR>
    " }
    " scrooloose/nerdtree {
        map <C-n> :NERDTreeToggle<CR>
    " }
    " scrooloose/syntastic {
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 0
        let g:syntastic_check_on_open = 0
        let g:syntastic_check_on_wq = 0
        let g:syntastic_aggregate_errors = 1
    " }
    " majutsushi/tagbar {
        nmap <F9> :TagbarToggle<CR>
    " }
    " raichoo/haskell-vim {
        let g:haskell_indent_if = 0
        let g:haskell_indent_in = 0
    " }
    " LaTeX-Box-Team/LaTeX-Box {
        let g:LatexBox_latexmk_preview_continuously = 1
        let g:LatexBox_quickfix = 2
        let g:LatexBox_viewer="open -a /Applications/Skim.app"
        nmap <leader>L :LatexErrors<CR>
    " }
    " vim-utils/vim-man {
        nmap <leader>mm <Plug>(Man)
        nmap <leader>mv <Plug>(Vman)
    " }
" }

" vim: foldmethod=marker foldlevel=1 foldmarker={,}
